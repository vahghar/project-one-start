// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id    String  @id @default(cuid())
    emailAddress String  @unique
    firstName  String?
    lastName  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    imageUrl String?
    credits Int @default(100)
    userToProjects UserToProject[]

    questionsAsked question[]
    stripeTransactions StripeTransaction[]
}

model Project {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    githubUrl String

    deletedAt DateTime?
    userToProjects UserToProject[]
    commits Commit[]
    sourceCodeEmbeddings sourceCodeEmbedding[]

    savedQuestions question[]
    meetings Meeting[]
}

model UserToProject {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    projectId String

    user User @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId,projectId])
    @@index([userId])
    @@index([projectId])
}

model Commit {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId String
    project Project @relation(fields: [projectId], references: [id])

    commitMessage String
    commitHash String
    commitAuthorName String
    commitAuthorAvatar String
    commitDate DateTime

    summary String
    @@index([projectId])
    @@index([commitDate])
}

model sourceCodeEmbedding {
    id String @id @default(cuid())

    summaryEmbedding Unsupported("vector(768)")?
    sourceCode String
    fileName String
    summary String

    projectId String
    project Project @relation(fields: [projectId], references: [id])
    @@index([projectId])
}

model question { 
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  
    question String
    answer String

    fileReferences Json?

    projectId String
    project Project @relation(fields: [projectId], references: [id])

    userId String
    user User @relation(fields: [userId], references: [id])
}

model Issue {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start String
    end String
    gist String
    headline String
    summary String

    meetingId String
    meeting Meeting @relation(fields: [meetingId], references: [id])
}

model Meeting { 
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    meetingUrl String
    projectId String
    project Project @relation(fields: [projectId], references: [id])

    status MeetingStatus @default(PROCESSING)
    issues Issue[]
}

enum MeetingStatus {
    PENDING
    PROCESSING
    COMPLETED
}

model StripeTransaction {
    id  String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user User @relation(fields: [userId], references: [id])
    credits Int
}